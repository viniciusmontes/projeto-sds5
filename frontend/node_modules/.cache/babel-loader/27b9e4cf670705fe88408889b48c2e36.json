{"ast":null,"code":"var _jsxFileName = \"/Users/macuser/Documents/ws-springboot/projeto-sds5/frontend/src/components/BarChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: {\n      categories: []\n    },\n    series: [{\n      name: \"\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/success-by-seller`).then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => x.sellerName);\n      const mySeries = data.map(x => x.sum);\n      setChartData({\n        labels: myLabels,\n        series: mySeries\n      });\n    });\n  }, []);\n  const options = {\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    }\n  };\n  const mockData = {\n    labels: {\n      categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    },\n    series: [{\n      name: \"% Sucesso\",\n      data: [43.6, 67.1, 67.7, 45.6, 71.1]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      xaxis: mockData.labels\n    },\n    series: mockData.series,\n    type: \"bar\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BarChart, \"7PJXrkkaAfyhhiGr2CAdri13Rs4=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/Users/macuser/Documents/ws-springboot/projeto-sds5/frontend/src/components/BarChart/index.tsx"],"names":["Chart","BarChart","chartData","setChartData","useState","labels","categories","series","name","data","useEffect","axios","get","BASE_URL","then","response","myLabels","map","x","sellerName","mySeries","sum","options","plotOptions","bar","horizontal","mockData","xaxis"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;;;AAcA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAAY;AAClDC,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE;AADR,KAD0C;AAIlDC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,EADV;AAEIC,MAAAA,IAAI,EAAE;AAFV,KADI;AAJ0C,GAAZ,CAA1C;AAYAC,EAAAA,SAAS,CAAC,MAAM;AACZC,IAAAA,KAAK,CAACC,GAAN,CAAW,GAAEC,QAAS,0BAAtB,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,YAAMN,IAAI,GAAGM,QAAQ,CAACN,IAAtB;AACA,YAAMO,QAAQ,GAAGP,IAAI,CAACQ,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,UAAhB,CAAjB;AACA,YAAMC,QAAQ,GAAGX,IAAI,CAACQ,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAlB,MAAAA,YAAY,CAAC;AAAEE,QAAAA,MAAM,EAAEW,QAAV;AAAoBT,QAAAA,MAAM,EAAEa;AAA5B,OAAD,CAAZ;AAEH,KARL;AASH,GAVQ,EAUN,EAVM,CAAT;AAYA,QAAME,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE;AACTC,MAAAA,GAAG,EAAE;AACDC,QAAAA,UAAU,EAAE;AADX;AADI;AADD,GAAhB;AAQA,QAAMC,QAAQ,GAAG;AACbrB,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,OAA7C;AADR,KADK;AAIbC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,WADV;AAEIC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AAFV,KADI;AAJK,GAAjB;AAYA,sBACI,QAAC,KAAD;AACI,IAAA,OAAO,EAAE,EAAE,GAAGa,OAAL;AAAcK,MAAAA,KAAK,EAAED,QAAQ,CAACrB;AAA9B,KADb;AAEI,IAAA,MAAM,EAAEqB,QAAQ,CAACnB,MAFrB;AAGI,IAAA,IAAI,EAAC,KAHT;AAII,IAAA,MAAM,EAAC;AAJX;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAvDD;;GAAMN,Q;;KAAAA,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import Chart from 'react-apexcharts';\n\ntype SeriesData = {\n    name: string;\n    data: number[];\n}\n\ntype ChartData = {\n    labels : {\n        categories: string[];\n    };\n    series : SeriesData[];\n}\n\nconst BarChart = () => {\n\n    const [chartData, setChartData] = useState<ChartData>({\n        labels: {\n            categories: []\n        },\n        series: [\n            {\n                name: \"\",\n                data: []\n            }\n        ]\n    });\n\n    useEffect(() => {\n        axios.get(`${BASE_URL}/sales/success-by-seller`)\n            .then(response => {\n                const data = response.data as SaleSum[];\n                const myLabels = data.map(x => x.sellerName);\n                const mySeries = data.map(x => x.sum);\n\n                setChartData({ labels: myLabels, series: mySeries });\n\n            });\n    }, []);\n\n    const options = {\n        plotOptions: {\n            bar: {\n                horizontal: true,\n            }\n        },\n    };\n\n    const mockData = {\n        labels: {\n            categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n        },\n        series: [\n            {\n                name: \"% Sucesso\",\n                data: [43.6, 67.1, 67.7, 45.6, 71.1]\n            }\n        ]\n    };\n\n    return (\n        <Chart\n            options={{ ...options, xaxis: mockData.labels }}\n            series={mockData.series}\n            type=\"bar\"\n            height=\"240\"\n\n        />\n    );\n}\n\nexport default BarChart;"]},"metadata":{},"sourceType":"module"}